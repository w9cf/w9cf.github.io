My udev rules to identify my 2 TS590SG rigs

Serial port rules: (each all on one line). The serial number for the
Silicon Labs CP210x UART Bridge is unique.

SUBSYSTEM=="tty", ATTRS{idVendor}=="10c4", ATTRS{idProduct}=="ea60",
ATTRS{serial}=="0567003D1908", SYMLINK+="ttyTS590sg_a", GROUP="dialout",
MODE="0660"

SUBSYSTEM=="tty", ATTRS{idVendor}=="10c4", ATTRS{idProduct}=="ea60",
ATTRS{serial}=="05670043DF58", SYMLINK+="ttyTS590sg_b", GROUP="dialout",
MODE="0660"


Original audio rules. These required plugging in the TS590SG with the above
serial rules, and then getting the KERNEL value to use in the KERNELS
matching to set up the pulse audio names. Plugging into a different
USB port required redoing this.

#KERNELS is set to the KERNELS value for the internal TS590SG hub
#which corresponds to the physical USB port. The serial port serial
#number is used in 90-serial-ports.rules to alias the TS590SG serial
#ports to /dev/ttyTS590sg_a and /dev/ttyTS590sg_b. Therefore plugging
#in the TS590SG USB cable, powering it on, and using
#udevadm info -n /dev/ttyTS590sg_a -a
#or
#udevadm info -n /dev/ttyTS590sg_b -a
#will show the correct KERNELS value to use to get the corresponding
#audio device.
#Look for the parent device with idProduct 2512 and idVendor 0424.
#
ACTION=="change", SUBSYSTEM=="sound", KERNELS=="3-1.6.1", ATTR{id}="TS590SG_A",
ENV{PULSE_NAME}="TS590SG_A",ENV{ID_MODEL_FROM_DATABASE}="TS590SG_A"
ACTION=="change", SUBSYSTEM=="sound", KERNELS=="3-1.6.6", ATTR{id}="TS590SG_B",
ENV{PULSE_NAME}="TS590SG_B",ENV{ID_MODEL_FROM_DATABASE}="TS590SG_B"

The following is the current configuration in 99-usb-audio.rules
#
# Here ts590sg.py walks walks up the DEVPATH environment variable until it
# finds the idProduct and idVendor of the internal hub of the TS590SG, it
# then walks down the subdirectories until it finds the idProduct and idVendor
# of the UART. It checks that serial number to tell which rig is which
#
ACTION=="change", SUBSYSTEM=="sound", ATTRS{idVendor}=="08bb",
ATTRS{idProduct}=="29b3", PROGRAM="/usr/local/udevprograms/ts590sg.py",
ATTR{id}="%c",ENV{PULSE_NAME}="%c",ENV{ID_MODEL_FROM_DATABASE}="%c"

The python code returns either TS590SG_A or TS590SG_B which is substituted
for the pulse audio names and IDs. It is:

#!/usr/bin/env python3

#TS590SG internal hub ids
hubIdVendor = "0424"
hubIdProduct = "2512"
#TS590SG UARTs
UartIdVendor = "10c4"
UartIdProduct = "ea60"
UartSerialA = "0567003D1908"
UartSerialB = "05670043DF58"

import os
import sys
path = '/sys' + os.environ["DEVPATH"]
count = 0
vendor = ""
product = ""
#Walk up the devpath to find the TS590SG internal usb hub
while path != '/':
   if 'devpath' in os.listdir(path):
      count += 1
      if count == 2:
         with open(path + '/idVendor') as f:
            vendor = f.readline().rstrip()
         with open(path + '/idProduct') as f:
            product = f.readline().rstrip()
         break
   path = os.path.dirname(path)

#Do a sanity check that the ids are correct, then find the subdirectory
#for the UART. Read the Serial number to identify the rig.
if (vendor == hubIdVendor) and (product == hubIdProduct):
   subdirs = [f.path for f in os.scandir(path) if f.is_dir() and not f.is_symlink()]
   for d in subdirs:
      if 'devpath' in os.listdir(d):
         with open(d + '/idVendor') as f:
            vendor = f.readline().rstrip()
         with open(d + '/idProduct') as f:
            product = f.readline().rstrip()
         if (vendor == UartIdVendor) and (product == UartIdProduct):
            with open(d + '/serial') as f:
               serial = f.readline().rstrip()
               if serial == UartSerialA:
                  print("TS590SG_A")
                  sys.exit(0)
               elif serial == UartSerialB:
                  print("TS590SG_B")
                  sys.exit(0)

sys.exit(1)



Note! Looking at lsusb and the device number, the serial port has a
higher device number than the sound card device when DC is applied
to the TS590SG. This suggests that there may be a race condition
between the sound card udev rule getting triggered and the USB serial
port getting set up. I have not seen this problem. From the output
of udevadm monitor, it looks like the udev sound card processing in
/lib/udev/rules.d/78-sound-card.rules which waits for the card* device
to be setup takes enough time that the serial port is connected before
the change event occurs, which seems to be the last thing that happens
from the monitor output.  A failure to find the serial port should simply
cause the python code to exit with status 1, which will make the rule
not match, and the default names would be used for the sound card.

If there is a problem, I can revert to the previous method that
identifies the KERNELS value to use.
